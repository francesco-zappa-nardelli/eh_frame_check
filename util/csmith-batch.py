#!/usr/bin/env python3

import argparse
import hashlib
import os
import random
import shutil
import subprocess

cflags_choices = [
    ('-O0', '-O1', '-O2', '-O3'),
    ('-fomit-frame-pointer', '-fno-omit-frame-pointer'),
]

csmithflags_choices = [
    ('--argc', '--no-argc'),
    ('--arrays', '--no-arrays'),
    ('--bitfields', '--no-bitfields'),
    ('--comma-operators', '--no-comma-operators'),
    ('--compound-assignment', '--no-compound-assignment'),
    ('--consts', '--no-consts'),
    ('--divs', '--no-divs'),
    ('--embedded-assigns', '--no-embedded-assigns'),
    ('--pre-incr-operator', '--no-pre-incr-operator'),
    ('--pre-decr-operator', '--no-pre-decr-operator'),
    ('--post-incr-operator', '--no-post-incr-operator'),
    ('--post-decr-operator', '--no-post-decr-operator'),
    ('--unary-plus-operator', '--no-unary-plus-operator'),
    ('--jumps', '--no-jumps'),
    ('--longlong', '--no-longlong'),
    ('--int8', '--no-int8'),
    ('--uint8', '--no-uint8'),
    ('--float', '--no-float'),
    #('--main', '--nomain'),
    ('--math64', '--no-math64'),
    ('--inline-function', '--no-inline-function'),
    ('--muls', '--no-muls'),
    ('--safe-math', '--no-safe-math'),
    ('--packed-struct', '--no-packed-struct'),
    ('--paranoid', '--no-paranoid'),
    ('--pointers', '--no-pointers'),
    ('--structs', '--no-structs'),
    ('--unions', '--no-unions'),
    ('--volatiles', '--no-volatiles'),
    ('--volatile-pointers', '--no-volatile-pointers'),
    ('--const-pointers', '--no-const-pointers'),
    #('--global-variables', '--no-global-variables'),
    #('--builtins', '--no-builtins'),
    # --inline-function-prob <num>: set the probability of each function being marked as inline (default is 50).
    # --max-array-dim <num>: limit array dimensions to <num>. (default 3)
    # --max-array-len-per-dim <num>: limit array length per dimension to <num> (default 10).
    # --max-block-depth <num>: limit depth of nested blocks to <num> (default 5).
    # --max-block-size <size>: limit the number of non-return statements in a block to <size> (default 4).
    # --max-expr-complexity <num>: limit expression complexities to <num> (default 10).
    # --max-funcs <num>: limit the number of functions (besides main) to <num>  (default 10).
    # --max-pointer-depth <depth>: limit the indirect depth of pointers to <depth> (default 2).
    # --max-struct-fields <num>: limit the number of struct fields to <num> (default 10).
    # --max-union-fields <num>: limit the number of union fields to <num> (default 5).
]

def choose_flags(choices, defaults=''):
    flags = defaults.split(' ')
    for choice in choices:
        flags.append(random.choice(choice))
    return list(filter(lambda flag: flag != '', flags))

def file_slug(filename):
    hasher = hashlib.sha1()
    with open(filename, 'rb') as f:
        hasher.update(f.read())
    return hasher.hexdigest()[:12]

parser = argparse.ArgumentParser(description='Run a test executable on programs generated by csmith')
parser.add_argument('testexec', help='The test executable, takes the C source file as first argument, returns 0 if test succeeds')

args = parser.parse_args()
csmith = os.environ.get('CSMITH', 'csmith')
csmith_filename = 'csmith.c'
test_exec = args.testexec

print("To investigate a failing test, run: env $(cat <env-file>) %s <source-file>" % test_exec)

while True:
    cflags = choose_flags(cflags_choices, os.environ.get('CFLAGS', ''))
    csmithflags = choose_flags(csmithflags_choices, os.environ.get('CSMITHFLAGS', ''))

    subprocess.run([csmith, '-o', csmith_filename] + csmithflags, check=True)

    env = os.environ.copy()
    env['CFLAGS'] = ' '.join(cflags)
    p = subprocess.run([test_exec, csmith_filename], env=env)
    if p.returncode != 0:
        slug = file_slug(csmith_filename)
        source_filename = "csmith-%s.c" % slug
        env_filename = "csmith-%s.env" % slug

        print("Got a failing test case, saving to %s" % source_filename)

        shutil.copyfile(csmith_filename, source_filename)

        with open(env_filename, 'w+') as f:
            f.write('CFLAGS=%s\n' % ' '.join(cflags))
            f.write('CSMITHFLAGS=%s\n' % ' '.join(csmithflags))
